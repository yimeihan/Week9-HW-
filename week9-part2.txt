1.
The Web Storage API permits applications to store data within an individual user's browser.

2.
Before HTML5, application data had to be stored in cookies, included in each server request.

3.
- more secure
- the storage limit is much larger (at least 5MB) 
- information is never transferred to the server

4.
- sessionStorage
- localStorage

5.
Yes. localStorage and sessionStorage can be read client-side only.

6.
cookies are popular because they allow sites to store user data directly into the user's Web browser. They are mostly used to identify a user's session, allowing a web server to recognize the user as they navigate through the site, and may contain sensitive data.

7.
Because it may contain sensitive data. That means they have to be well secured and protected.

8.
The httpOnly flag blocks access of a cookie from the client-side and therefore JavaScript code.
If an XSS (Cross Site Scripting) attack does succeed in injecting some JavaScript despite your security measures, it would not be able to access the cookies. That would mitigate the negative impact of the XSS attack.

9.
Web Storage is connected to a particular origin (domain and protocol). All pages from one origin, can store and access the same data.

10.
Storage interface: permits you to set, retrieve, and remove data for a specific domain and storage type (local or session).

11.
the length property returns an integer representing the number of data items stored in the Storage object.

function populateStorage() {
    localStorage.setItem('bgcolor', 'yellow');
    localStorage.setItem('font', 'Helvetica');
    localStorage.setItem('image', 'cats.png');

    localStorage.length; // Should return 3
}


12.
- Storage.key(): when passed a certain number represented by n, this method returns the name of the nth key in the storage.
- Storage.getItem(): when passed a key name, will return that key's value, or null if the key does not exist.

- Storage.setItem(): when passed a key name and value, will add that key to the storage, or update that key's value if it already exists.
sessionStorage.setItem("autosave", textField.value);

- Storage.removeItem(): when passed a key name, will remove that key from the storage. If there is no item associated with the given key, this method will do nothing.
sessionStorage.removeItem("autosave", textField.value);

- Storage.clear(): when invoked, will empty all keys out of the storage.
sessionStorage.clear();

13.
This prevents client-side access to that cookie.

14.
sessionStorage is similar to localStorage ; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends. A page session lasts as long as the browser is open, and survives over page reloads and restores.

15.
localStorage and sessionStorage accomplish the exact same thing and have the same API.

16.
The try statement allows you to define a block of code to be tested for errors while it is being executed. The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.

17.
If there IS sessionStorage support, then the program steps into the else statement. There we set and get our sessionStorage as well as check if we have exceeded our sessionStorage quota. Since we have to catch our exception, we need to use a try...catch statement.

18.
The JSON. stringify method converts a JavaScript value into a JSON string. It is typically used to convert JavaScript arrays or objects to JSON, although it can also be used with simple data types like strings and numbers.
We need to take the sessionStorage object's autosave property's value and extract it from sessionStorage and transform the value into a string so that we may insert it into a .txt file. Otherwise, the value of the sessionStorage key would not be readable.

const csv = JSON.stringify(sessionStorage['autosave']);


19.
JSON.stringify
We need to take the sessionStorage object's autosave property's value and extract it from sessionStorage and transform the value into a string so that we may insert it into a .txt file. Otherwise, the value of the sessionStorage key would not be readable.

20.
session.js:10 Hello! I love JavaScript, and I prefer sessionStorage. How about you? üëç
cons

